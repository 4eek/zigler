<% on_load_fn = @sema.callbacks[:on_load]%>
beam.context.env = env;
beam.context.mode = .callback;
beam.context.allocator = beam.allocator;
<%= if on_load_fn.arity == 2 do %>
  <% payload_type = Enum.at(on_load_fn.params, 1) %>
  const payload = beam.get(<%= Zig.Type.render_zig(payload_type)%>, .{.v = load_info}, .{}) catch return -1;
  <%= case on_load_fn.return do %>
    <% %Zig.Type.Integer{} -> %>
      return @intCast(nif.<%= on_load_fn.name %>(@ptrCast(priv_data), payload)); 
    <% %Zig.Type.Enum{} -> %>
      return @intFromEnum(nif.<%= on_load_fn.name %>(@ptrCast(priv_data), payload)); 
    <% :void -> %>
      nif.<%= on_load_fn.name %>(@ptrCast(priv_data), payload); 
      return 0;
    <% %Zig.Type.Error{child: :void} -> %>
      nif.<%= on_load_fn.name %>(@ptrCast(priv_data), payload) catch |err| return @intFromError(err);
      return 0;
  <% end %>
<% else %>
  return nif.<%= on_load_fn.name %>(env, @ptrCast(priv_data), load_info);
<% end %>